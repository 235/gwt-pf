PlesoGWTFramework - це GWT модуль, створений для прискореної розробки візуального 
інтерфейсу інформаційних систем.

Основними візуальними елементами інформаційної системи є довідники та форми.
В модулі розроблено два універсальних віджета для представлення цих елементів: 
CustomRBWindow та CustomEFWindow. Конструктор кожного з віджетів приймає 
реалізацію відповідного інтерфейса, будує відповідне йому відображення та 
підтримує запрограмовану в ньому логіку роботи.

Автоматична валідація спеціалізованих типів даних (числа, дати).
Автоматична валідація введених даних на обов"язковість.
Автоматична валідація діапазонних даних.
Підтримка підпорядкованих довідників.
Сортування та пейджинг даних у довіднику.
Підтримка механізму пошуку даних.
Форма створення даних.
Форма редагування даних.
Форма відображення даних.
Видалення елементу даних.
Підтримка додаткових операцій над даними у довіднику чи формі.
Багатовіконний інтерфейс.
Автоматично згенероване меню.
Перевірка авторських прав на кожну операцію в системі.
Підтримка перечислюваних типів даних (енуми).

===================================================

ПЛАН
загального опису призначення та функціональності PlesoGWTFramework (GWT-PF)

1. Опис проблеми розробки візуального рівня інформаційних систем.
(типи візуальних елементів, їх спорідненість, однотипність взаємодії, складність 
розробки візуальних елементів)
2. Розробка універсальних візуальних елементів, як спосіб вирішення
ряду проблем розробки візуального рівня.
3. Необхідність формалізації рівня бізнес логіки для можливості роботи з ним
універсальними візуальними елементами.
4. Короткий опис архітектури інтерфейсів, що реалізує бізнес логіка.
5. Опис наявної доступної функціональності візуального рівня, реалізація якої 
автоматизована у GWT-PF.
6. Переваги архітектурного рішення з можливістю підміни візуального рівня.
7. Переваги наявності формалізованого рівня бізнес логіки, як найвищого 
системно-незалежного рівня з реалізацією логіки роботи програми.
8. Перспективи розвитку GWT-PF. 

---
1. Проблема розробки візуального рівня інформаційних систем.

Однією з основних задач автоматизованої інформаційної системи є підтримка
великої кількості зв"язаних даних. На візуальному рівні це виражається
розробкою відповідної кількості довідників та форм, що забезпечують доступ
та управління цими даними.

Розробка візуальних компонентів системи завжди супроводжується рядом труднощів
пов"язаних із програмною складністю їх функціональності. Як правило
вся функціональність візуальних елементів вже запрограмована в бібліотеці
візуальних компонентів, що використовуються системою. Тим не менше їх необхідно
правильно створити, пов"язати між собою, пов"язати з джерелами даних, та
настроїти на поставлену вимогами поведінку. Ці задачі вимагають від програміста
громіздкої роботи по вивченню бібліотеки компонентів, вмінню правильно їх
використовувати і, відповідно, написанню програмного коду, який на програмному 
рівні виконає поставлені вимоги. 

Як показує досвід, часто результат роботи програміста (код) при рішенні таких 
задач досить однотипний і вимагає творчого та інтелектуального підходу тільки 
на перших етапах роботи при вивченні візуальної компонентної бази та вимог до 
системи. Це дає підстави думати, що цю роботу можна автоматизувати. І як 
результат - зекономити значні ресурси, що йдуть на великі об"єми робіт по
розробці, тестуванню та підтримці візуального рівня системи.

(ІМХО, цифри інтуїтивні - спитати у якогось менеджера)
З огляду на досвід, бюджет розробки візуального рівня ІС (вручну) складає 
щонайменше 40% від загального бюджету проекту. А в системах з багатим візуальним 
інтерфейсом до 80%. Більше половини однотипної роботи, що входить в цей об"єм 
можна автоматизувати. Таким чином автоматизація розробки візуального рівня могла 
б скоротити бюджет проекту на 20% - 50% залежно від специфіки задачі. Крім того
автоматизація забезпечує технологічну досконалість проекту, простоту
його підтримки і одноманітність користувацького інтерфейсу, що спрощує
процес навчання користування продуктом.

---
2. Універсальні візуальні компоненти інформаційної системи.

Як було сказано вище, основними візуальними компонентами інформаційної системи
є довідники та форми (картки).

Довідник - це представлення набору однотипних даних (записів) з заданими полями
(колонками) з можливістю навігації та здійснення певних операцій над ними:
перегляд, редагування, видалення тощо. Основним чином довідники відрізняються
між собою: типом відображуваних даних, джерелом даних з якого беруться дані,
колонками (полями) даних і можливими операціями над даними.

Форма (картка) - це представлення одиниці даних (запису) з метою
її перегляду, зміни або створення нового екземпляру. Крім того, як і у довіднику, 
картка може здійснювати певні додаткові операції над даним записом і відображати 
певні додаткові дані (н-д підпорядковані довідники).

Класичні вимоги до роботи з даними можна представити списком:
1. Пошук даних.
2. Перегляд даних.
3. Створення даних.
4. Редагування даних.
5. Видалення даних.
6. Інші операції над даними (сюди відносяться якісь специфічні операції, які 
неможливо узагальнити).

Дані вимоги можуть бути виконані посередництвом опису взаємодії довідників та 
форм. Розглянемо загальну схему такої взаємодії.

Користувач виконує певну команду і система виводить довідник з даними.
В довіднику є доступна операція створення даних (п.3), яка відкриває
форму створення запису даних. Користувач вводить поля запису, натискає на 
кнопку "додати", система додає запис в набір даних і закриває вікно форми
створення. Дані довідника перезагружаються для відображення в наборі даних
новоствореного запису.

Користувач натискає кнопку "пошук" (п.1) для введення параметрів пошуку у 
довіднику і потім кнопку "знайти". Довідник завантажує дані з джерела даних, що 
відповідають параметрам пошуку.

Користувач обирає необхідний запис даних, натискає кнопку "редагувати". 
Відкривається форма редагування даних (п. 4). У формі редагування користувач
має доступ до зміни всіх полів даних запису. Після зміни користувач натискає
кнопку "записати", форма закривається і довідник перевантажує набір даних,
щоб відобразити здійснені зміни. Аналогічно працює функція перегляду даних
(п.2) з тією різницею, що поля запису недоступні до редагування.

Функція видалення даних (п.5) може бути доступна як з довідника (по вибраному
рядку) так і з форми (картки) запису, оскільки у обох випадках з контексту
видно який саме запис даних необхідно видалити. При цьому система запитує
підтвердження в користувача.

Аналогічно функції видалення в контексті обраного запису може бути виконана
вимога по здійсненню інших операцій над даними (п.6).

Вищенаведений спосіб реалізації поставлених вимог можна уточнити та збагатити
відповідно до вимог конкретної системи. В будь-якому разі спосіб роботи
візуальних компонентів, що забезпечують роботу з даними можна узагальнено
описати для всіх (чи переважної більшості) випадків. Звідси випливає, що
можна розробити два універсальні візуальні компоненти (довідник та картку) для
виконання вимог системи по роботі зі всіма типами даних.

Таким чином розробка візуального рівня для роботи з великою кількістю 
довідників та карток по наведеним вимогам зводиться до розробки двох візуальних 
компонентів, а не по одному (чи більше) компоненту на кожен тип даних.

Такі візуальні компоненти розроблені в модулі GWT-PF - це
CustomRBWindow (універсальний довідник) та CustomFormWindow 
(універсальна форма/картка). Це дозволяє використати GWT-PF
для прискорення розробки візуального рівня інформаційної системи. 

---
3. Розробка формалізованого рівня бізнес логіки для роботи з універсальними 
візуальними компонентами.

Класичний архітектурний підхід для розробки візуального рівня передбачає
розробку класів, що зв"язують незалежні між собою бібліотеку візуальних 
компонентів та рівень бізнес логіки інформаційної системи. Ці класи і є
візуальним рівнем системи, розробку яких необхідно уникнути.

Універсальні візуальні компоненти і рівень бізнес логіки системи не мають 
безпосередньо залежати одне від одного. На це є ряд канонічних причин, а 
також неможливісь розробки універсального компоненту, який би залежив
від неуніверсальної бізнес логіки. Тим не менше ці архітектурні рівні
повинні взаємодіяти. Одним із рішень такої взаємодії є введення додаткового
нелажезного рівня з інтерфейсами, який був розроблений у GWT-PF.

Розробка рівня бізнес логіки системи буде заключатись в реалізації цих 
інтерфейсів, а розробка універсальних візуальних компонентів - у використанні 
реалізації цих інтерфейсів.

Таким чином універсальний візуальний компонент буде бачити бізнес логіку,
через інтерфейси, що формально описують правила роботи з нею. Бізнес логіка
в свою чергу повинна бути написана так, щоб відповідати формальним правилам
взаємодії цих інтерфейсів.

---
4. Дизайн інтерфейсів для формального опису процесу обробки даних інформаційної 
системи.

При проектуванні дизайну інтерфейсів GWT-PF необхідно було 
передбачити описані вище наведені класичні схеми роботи з даними, забезпечити 
можливість їх розширення та максимальної гнучкості.

4.1. Інтерфейси рівня даних.

Одиниця (запис) даних представляється інтерфейсом IDataRow, а його поля 
(колонки) представляються масивом IDataColumn. Доступ до полів даних рядка
здійснюється через екземпляри колонок.

Значення полів рядка представляється інтерфейсом IDBValue, який підтримує
явне null значення (через віповідну властивість), а також вміє здійснювати 
зчитування свого значення з текстового представлення і повертати його у 
текстовому представленні.

Джерело даних представляється інтерфейсом IDataSource, який по запиту
асинхронно повертає масив рядків. В запит передаються параметри пошуку даних
у вигляді рядка, а також параметри сортування та пейджингування.

4.2. Інтерфейси форми (картки).

Базовим інтерфейсом форми є IForm. Цей інтерфейс повертає заголовок форми,
а також масив елементів форми. Елемент форми представляється інтерфейсом
IFormItem. Наслідники IFormItem представляють різні типи елементів форми. Основним 
і найчастіше уживаним є IEditColumnFormItem, який представляє елемент редагування
поля даних рядка. IEditColumnFormItem привзяується до певної колонки рядка
і знає чи обовязкове це поле до введення.

Таким чином форма може містити в собі масив елементів редагування полів рядка,
який у ній редагується. А так як наслідники IFormItem можуть представляти
різні типи елементів, то це дозволяє розширяти можливості форм для редагування
особливих типів даних або реалізації додаткових операцій.

Базовий інтерфейс IForm забезпечує формування правил роботи з колонками
рядка. Наслідки IForm визначають правила здійснення операцій над рядком.

IAddForm - дозволяє створювати новий запис, в ньому реалізуються метод
створення пустого рядка і асинхронного запису цього рядка в набір даних.

IEditForm - дозволяє редагувати запис, містить метод асинхронного завантаження
та запису в набір даних.

IParametersForm - форма введення параметрів (найчастіше параметрів пошуку), 
дозволяє створювати пустий рядок для редагування, 
який потім буде використовуватись як параметр в інших сутностях.

IViewForm - форма перегляду даних, може асинхронно завантажити рядок з набору
даних.

4.3. Інтерфейси довідника.

Базовим інтерфейсом довідника є IRB. Цей інтерфейс повертає заголовок
довідника, масив колонок довідника та джерело даних (IDataSource) довідника. 
Через джерело даних довідник завантажує необхідні дані для відображення.

Колонка довідника представляється інтферфейсом IRBColumn, який містить
заголовок колонки, інформацію про те, до якої колонки даних вона прив"язана,
а також пропорційну ширину в таблиці довідника.

Для здійснення операцій додавання, редагування, видалення та інших, клас, що
реалізує довідник повинен реалізувати також інтерфейс IActionsProvider.
Цей інтерфейс повертає масив IActionProvider.

IActionProvider - це узагальнена операція. Її інтерфейс має тільки заголовок
операції, але його наслідники представляють конкретні дії над даними.

Операції додавання, редагування, пошуку та перегляду представляються 
інтерфейсами: IAddFormProvider, IEditFormProvider, ISearchFormProvider та 
IViewFormProvider відповідно. Кожен з наведених інтерфейсів повертає реалізацію
інтерфейсу відповідної форми.

Операція видалення представляється інтерфейсом IDeleteRowProvider, який
повертає реалізацію інтерфейсу IDeleteRowExecutor. IDeleteRowExecutor
має метод асинхронного видалення запису з набору даних.

4.4. Інтерфейс підпорядкованого довідника.

Інтерфейс ISelector представляє собою селектор даних з підпорядкованого 
довідника. Для цього він може повертати реалізацію інтерфейсу підпорядкованого
довідника, а також має функцію копіювання вибраного у ньому рядка в цільовий
рядок.

Селектор використовується як елемент форми. Його обгортає наслідник IFormItem - 
ISelectorFormItem. Це дозволяє створювати на формі поля, дані яких беруться
з інших довідників.

Практично це працює так. Форма містить на собі елемент ISelectorEFItem і
відображає його з кнопкою "вибрати". Користувач настикає кнопку, форма
завантажує з селектора реалізацію довідника та відображає її для того
щоб користувач здійснив вибір рядка. Користувач вибирає рядок, тоді
форма використовує селектор щоб скопіювати вибраний рядок з довідника у рядок 
форми редагування.

---
5. Функціональність візуальної частини GWT-PF.

На разі візуальні компоненти GWT-PF містятять автоматичну 
підтримку такої функціональнсоті:

1. Валідація коректності введених у формі даних: числові дані, дата, час.
2. Валідація коректності введення діапазону: числового, часового.
3. Валідація даних обов"язкових до введення.
4. DataGrid з підтримкою сортування та пейджингування даних.
5. Підтримка механізму пошуку даних.
6. Підтримка звязаних даних.
7. Підтримка перечислюваних типів даних. 
8. Перевірка авторизації при здійсненні будь-яких операцій з даними.
9. Багатовіконний інтерфейс
10. Підтримка створення, редагування, видалення, а також опціональних операцій над даними.
11. Автоматична генерація: довідників, форм, меню.
12. Підтримка зовнішньої системи звітності з можливістю параметризації звітів.

---
6. Переваги архітектурного рішення з можливістю підміни візуального рівня.

Як було сказано в розділі 4 бізнес логіка системи залежить тільки від рівня
інтерфейсів, що формально описують логіку роботи з даними. Візуальний рівень,
що пропонується GWT-PF є універсальним і логіку конкретної системи 
ніяк не відображє. Це означає, що його можна замінити не порушивши цілісність 
системи вцілому.

Так наприклад часто оновлюються і удосконалюються бібліотеки візуальних 
компонентів, що дозволяє розробити досконаліший візуальний рівень системи,
не змінюючи при цьому бізнес логіки.

---
7. Переваги наявності формалізованого рівня бізнес логіки.

Програмування бізнес логіки через реалізацію інтерфейсів, що описують
правила роботи з даними спрощують і стандартизують процес її написання.
Це дозволяє програмістам підходити до процесу більш систематично і одноково
просто писати свій та розуміти чужий код.

Крім того це робить можливим використання засобів автоматичної генерації коду
по певним вихідним даним, наприклад схемі бази даних.

---
8. Перспективи розвитку GWT-PF.

GWT-PF буде розвиватись в сторону удосконалення графічного 
інтерфейсу користувача, оптимізації використання ресурсів системи, розвитку
архітектури інтерфейсів з метою розширення можливої функціональності системи, 
розробки інструментарію для генерації коду бізнес логіки.